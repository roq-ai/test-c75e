generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model engineer {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  skills          String           @db.VarChar(255)
  experience      String           @db.VarChar(255)
  availability    String           @db.VarChar(255)
  user_id         String           @db.Uuid
  organization_id String           @db.Uuid
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  updated_at      DateTime         @default(now()) @db.Timestamp(6)
  organization    organization     @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  hiring_request  hiring_request[]
}

model hiring_request {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status      String   @db.VarChar(255)
  user_id     String   @db.Uuid
  engineer_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  engineer    engineer @relation(fields: [engineer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  engineer    engineer[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  firstName      String?          @db.VarChar(255)
  lastName       String?          @db.VarChar(255)
  roq_user_id    String           @db.VarChar(255)
  tenant_id      String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  engineer       engineer[]
  hiring_request hiring_request[]
  organization   organization[]
}
